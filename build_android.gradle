buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
    }
}

allprojects {
    apply plugin: 'com.android.library'
    repositories {
        google()
        mavenCentral()
    }
}

import org.gradle.internal.os.OperatingSystem

def nativeLibs = System.getenv('INTEL_OPENVINO_DIR') + "/runtime/lib"
def ovNativeLibs = ""

def arch = System.getProperty("os.arch")
def ov_arch = arch;
println 'CPU architecture: ' + arch

if (arch == "x86_64" || arch == "amd64" || arch == "x64" || arch == "x86-64") {
    ov_arch = "intel64";
} else if (arch == "aarch64" || arch == "arm64" || arch == "arm-v8") {
    ov_arch = "aarch64";
} else if (arch == "arm" || arch == "arm-v7" || arch == "armv7" || arch == "arm32") {
    ov_arch = "armhf";
}

if (OperatingSystem.current().isMacOsX()) {
    ovNativeLibs = System.getenv('INTEL_OPENVINO_DIR') + "/runtime/lib/" + ov_arch + "/Release"
} else if (OperatingSystem.current().isLinux()) {
    ovNativeLibs = System.getenv('INTEL_OPENVINO_DIR') + "/runtime/lib/" + ov_arch
} else if (OperatingSystem.current().isWindows()) {
    ovNativeLibs = System.getenv('INTEL_OPENVINO_DIR') + "/runtime/bin/" + ov_arch + "/Release"
} else {
    logger.warn('Unknown operating system!')
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 30
    }

    compileOptions{
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            java {
                srcDirs = ["src/main/java"]
            }
            jniLibs.srcDirs = [ovNativeLibs]
            resources {
                srcDirs = [nativeLibs + "/arm64-v8a", nativeLibs + "/x86_64"]  // For plugins.xml
            }
        }

        test {
            jniLibs.srcDirs = [ovNativeLibs]
            resources {
                srcDirs = [nativeLibs + "/arm64-v8a", nativeLibs + "/x86_64"]  // For plugins.xml
            }
        }
    }
    
    testOptions {
        unitTests.all {
            onlyIf {
                project.hasProperty('run_tests')
            }
            systemProperty 'MODELS_PATH', System.getProperty('MODELS_PATH')
            systemProperty 'device', System.getProperty('device')
        }
    }
}
    
dependencies {
    testImplementation "junit:junit:4.13.1"
    testImplementation "org.hamcrest:hamcrest-core:1.3"
}